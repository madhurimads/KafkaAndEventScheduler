@ExtendWith(MockitoExtension.class)
class CertificationFileUploadServiceClientImplTest {

    @InjectMocks
    CertificationFileUploadServiceClientImpl service;

    @Mock
    @Qualifier("certRestTemplate")
    RestTemplate mockRestTemplate;

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(service, "idtHost", "http://primary-host.com");
        ReflectionTestUtils.setField(service, "idtHost2", "http://fallback-host.com");
    }

    @Test
    void uploadCertAttachment_successFromPrimary() throws Throwable {
        // Arrange
        String id = "123";
        String sadiId = "SADI001";
        CertFileRequestContextEnum contextEnum = CertFileRequestContextEnum.UPLOAD;
        AttachmentInfo inputAttachment = new AttachmentInfo("test.pdf");

        AttachmentInfo mockResponse = new AttachmentInfo("uploaded.pdf");

        ObjectMapper objectMapper = new ObjectMapper();
        Object responseAsObject = objectMapper.convertValue(mockResponse, Object.class);

        try (MockedStatic<HttpParamUtil> mockStatic = Mockito.mockStatic(HttpParamUtil.class)) {
            mockStatic.when(() ->
                HttpParamUtil.httpParametersValidator(id, contextEnum.getCode(), sadiId)).thenReturn(null);

            when(mockRestTemplate.postForObject(
                    contains("http://primary-host.com"),
                    eq(inputAttachment),
                    eq(Object.class),
                    eq(id),
                    eq(contextEnum.getCode()),
                    eq(sadiId)
            )).thenReturn(responseAsObject);

            // Act
            AttachmentInfo result = service.uploadCertAttachment(id, contextEnum, inputAttachment, sadiId);

            // Assert
            assertNotNull(result);
            assertEquals("uploaded.pdf", result.getFileName());

            verify(mockRestTemplate, times(1)).postForObject(
                contains("http://primary-host.com"), any(), eq(Object.class), any(), any(), any());
            verify(mockRestTemplate, never()).postForObject(
                contains("http://fallback-host.com"), any(), eq(Object.class), any(), any(), any());
        }
    }

    @Test
    void uploadCertAttachment_fallbackToSecondaryHostOnException() throws Throwable {
        // Arrange
        String id = "123";
        String sadiId = "SADI002";
        CertFileRequestContextEnum contextEnum = CertFileRequestContextEnum.UPLOAD;
        AttachmentInfo inputAttachment = new AttachmentInfo("test.pdf");

        AttachmentInfo fallbackResponse = new AttachmentInfo("fallback.pdf");
        ObjectMapper mapper = new ObjectMapper();
        Object responseAsObject = mapper.convertValue(fallbackResponse, Object.class);

        try (MockedStatic<HttpParamUtil> mockStatic = Mockito.mockStatic(HttpParamUtil.class)) {
            mockStatic.when(() ->
                HttpParamUtil.httpParametersValidator(id, contextEnum.getCode(), sadiId)).thenReturn(null);

            when(mockRestTemplate.postForObject(
                    contains("http://primary-host.com"), any(), eq(Object.class), any(), any(), any()))
                .thenThrow(new RuntimeException("Primary service down"));

            when(mockRestTemplate.postForObject(
                    contains("http://fallback-host.com"), any(), eq(Object.class), any(), any(), any()))
                .thenReturn(responseAsObject);

            // Act
            AttachmentInfo result = service.uploadCertAttachment(id, contextEnum, inputAttachment, sadiId);

            // Assert
            assertNotNull(result);
            assertEquals("fallback.pdf", result.getFileName());
        }
    }

    @Test
    void uploadCertAttachment_invalidResponseThrowsWebServiceClientException() throws Throwable {
        // Arrange
        String id = "999";
        String sadiId = "SADI003";
        CertFileRequestContextEnum contextEnum = CertFileRequestContextEnum.UPLOAD;
        AttachmentInfo inputAttachment = new AttachmentInfo("invalid.pdf");

        // Simulate invalid JSON for AttachmentInfo but valid Error
        Error error = new Error("CERT_ERROR", "E001", "Virus Scan Failed", "MSG123");

        ObjectMapper mapper = new ObjectMapper();
        String errorJson = mapper.writeValueAsString(error);
        Object responseAsObject = mapper.readValue(errorJson, Object.class);

        try (MockedStatic<HttpParamUtil> mockStatic = Mockito.mockStatic(HttpParamUtil.class)) {
            mockStatic.when(() ->
                HttpParamUtil.httpParametersValidator(id, contextEnum.getCode(), sadiId)).thenReturn(null);

            when(mockRestTemplate.postForObject(
                    contains("http://primary-host.com"), any(), eq(Object.class), any(), any(), any()))
                .thenReturn(responseAsObject);

            // Act & Assert
            WebServiceClientException ex = assertThrows(WebServiceClientException.class, () ->
                service.uploadCertAttachment(id, contextEnum, inputAttachment, sadiId));

            assertEquals("CERT_ERROR", ex.getCategory());
            assertEquals("E001", ex.getCode());
            assertEquals("Virus Scan Failed", ex.getDescription());
            assertEquals("MSG123", ex.getMessageId());
        }
    }
}
