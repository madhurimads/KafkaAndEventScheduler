package gov.irs.fatca.qi.validator.responsibleOfficerContactPerson;

import jakarta.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.validation.Errors;

import gov.irs.fatca.qi.domain.account.ContactInfo;
import gov.irs.fatca.qi.domain.account.PowerOfAttorney;
import gov.irs.fatca.qi.domain.form14345.ResponsibleOfficerContactPerson;
import gov.irs.fatca.qi.validator.fields.FieldsValidator;

/**
 * Validation logic for General Information (Part 1) - Step 6 of 7. used only
 * for QI/WP/WT page9
 */
@Component
public class ResponsibleOfficerContactPersonValidator extends AbstractResponsibleOfficerContactPersonValidator {

    private ContactInfo contactInfo;

    @Resource(name = "fieldsValidator")
    private FieldsValidator fieldsValidator = new FieldsValidator();

    @Override
    protected void doValidate(ResponsibleOfficerContactPerson responsibleOfficerContactPerson, Errors bindingResult) {

        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getBusinessTitle())
                && !fieldsValidator.validateStandardInput(responsibleOfficerContactPerson.getBusinessTitle())) {

            bindingResult.rejectValue("businessTitle",
                    "responsibleOfficerContactPerson.businessTitle.Required.validationtext");
        }

        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getLegalName().getFirstName())
                || responsibleOfficerContactPerson.getLegalName().getFirstName() == null) {

            bindingResult.rejectValue("legalName.firstName", "legalName.firstName.Required.validationtext");
        }

        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getLegalName().getFirstName())
                && !fieldsValidator.validateName(responsibleOfficerContactPerson.getLegalName().getFirstName())) {

            bindingResult.rejectValue("legalName.firstName", "legalName.firstName.Invalid.validationtext");
        }

        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getLegalName().getLastName())
                || responsibleOfficerContactPerson.getLegalName().getLastName() == null) {

            bindingResult.rejectValue("legalName.lastName", "legalName.lastName.Required.validationtext");
        }

        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getLegalName().getLastName())
                && !fieldsValidator.validateName(responsibleOfficerContactPerson.getLegalName().getLastName())) {

            bindingResult.rejectValue("legalName.lastName", "legalName.lastName.Invalid.validationtext");
        }

        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getLegalName().getMiddleName())
                && !fieldsValidator.validateName(responsibleOfficerContactPerson.getLegalName().getMiddleName())) {

            bindingResult.rejectValue("legalName.middleName", "legalName.middleName.Invalid.validationtext");
        }

        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getCountry())
                || responsibleOfficerContactPerson.getAddress().getCountry().equals("Select country/jurisdiction")) {

            bindingResult.rejectValue("address.country", "address.country.Required.validationtext");
        }

        if ((responsibleOfficerContactPerson.getAddress().getCountry().equals("XX"))
                && (StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getOtherCountry()))) {

            bindingResult.rejectValue("address.otherCountry", "address.otherCountry.Required.validationtext");
        }

        if (responsibleOfficerContactPerson.getAddress().getCountry().equals("XX")) {
            if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getOtherCountry())
                    && (!fieldsValidator
                            .validateStandardInput(responsibleOfficerContactPerson.getAddress().getOtherCountry()))) {

                bindingResult.rejectValue("address.otherCountry", "address.otherCountry.Invalid.validationtext");
            }
        }

        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getAddressLine1())
                || responsibleOfficerContactPerson.getAddress().getAddressLine1() == null) {

            bindingResult.rejectValue("address.addressLine1", "address.businessLine1.Required.validationtext");
        }

        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getAddressLine1()) && !fieldsValidator
                .validateStandardInput(responsibleOfficerContactPerson.getAddress().getAddressLine1())) {

            bindingResult.rejectValue("address.addressLine1", "address.businessLine1.Invalid.validationtext");
        }

        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getAddressLine2()) && !fieldsValidator
                .validateStandardInput(responsibleOfficerContactPerson.getAddress().getAddressLine2())) {

            bindingResult.rejectValue("address.addressLine2", "address.businessLine2.Invalid.validationtext");
        }

        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getCity())
                || responsibleOfficerContactPerson.getAddress().getCity() == null) {

            bindingResult.rejectValue("address.city", "address.city.Required.validationtext");
        }

        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getCity())
                && !fieldsValidator.validateStandardInput(responsibleOfficerContactPerson.getAddress().getCity())) {

            bindingResult.rejectValue("address.city", "address.city.Invalid.validationtext");
        }

        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getCountry())
                && (responsibleOfficerContactPerson.getAddress().getCountry().equalsIgnoreCase("US"))) {

            if (StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getState())
                    || responsibleOfficerContactPerson.getAddress().getState().equals("")) {

                bindingResult.rejectValue("address.state", "address.state.Required.validationtext");
            }

            if (StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getPostalCode())
                    || responsibleOfficerContactPerson.getAddress().getPostalCode() == null) {

                bindingResult.rejectValue("address.postalCode", "address.postalCode.Required.validationtext");
            }

            if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getPostalCode())
                    && (!fieldsValidator.validateNumber(responsibleOfficerContactPerson.getAddress().getPostalCode())
                            || responsibleOfficerContactPerson.getAddress().getPostalCode().length() != 5)) {

                bindingResult.rejectValue("address.postalCode", "address.postalCode.Invalid.validationtext");
            }

        }

        if (responsibleOfficerContactPerson.getAddress().getCountry().equals("Select Country/Jurisdiction")
                || !StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getCountry())
                        && !responsibleOfficerContactPerson.getAddress().getCountry().equalsIgnoreCase("US")) {

            boolean isUS = false;

            if (responsibleOfficerContactPerson.getAddress().getCountry().equals("US")) {

                isUS = true;
            }

            if (!isUS) {
                if (StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getForeignProvince())
                        || responsibleOfficerContactPerson.getAddress().getForeignProvince() == null) {

                    bindingResult.rejectValue("address.foreignProvince",
                            "address.foreignProvince.Required.validationtext");
                }
                if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getForeignProvince())
                        && !fieldsValidator.validateStandardInput(
                                responsibleOfficerContactPerson.getAddress().getForeignProvince())) {

                    bindingResult.rejectValue("address.foreignProvince",
                            "address.foreignProvince.Invalid.validationtext");
                }

                if (StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getForeignPostalCode())
                        || responsibleOfficerContactPerson.getAddress().getForeignPostalCode() == null) {

                    bindingResult.rejectValue("address.foreignPostalCode",
                            "address.foreignPostalCode.Required.validationtext");
                }

                if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getAddress().getForeignPostalCode())
                        && (!fieldsValidator.validateForeignPostalCode(
                                responsibleOfficerContactPerson.getAddress().getForeignPostalCode())
                                || responsibleOfficerContactPerson.getAddress().getForeignPostalCode().length() > 9)) {

                    bindingResult.rejectValue("address.foreignPostalCode",
                            "address.foreignPostalCode.Invalid.validationtext");
                }
            }
        }

        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getPhoneNumber().getNumberPart1())
                || responsibleOfficerContactPerson.getPhoneNumber().getNumberPart1() == null) {

            bindingResult.rejectValue("phoneNumber.numberPart1", "phoneNumber.numberPart1.Required.validationtext");
        }
        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getPhoneNumber().getNumberPart1())
                && !fieldsValidator.validateNumber(responsibleOfficerContactPerson.getPhoneNumber().getNumberPart1())) {

            bindingResult.rejectValue("phoneNumber.numberPart1", "phoneNumber.numberPart1.Invalid.validationtext");
        }

        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getPhoneNumber().getNumberPart2())
                || responsibleOfficerContactPerson.getPhoneNumber().getNumberPart2() == null) {

            bindingResult.rejectValue("phoneNumber.numberPart2", "phoneNumber.numberPart2.Required.validationtext");
        }
        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getPhoneNumber().getNumberPart2()) && !fieldsValidator
                .validateTelephoneNumber(responsibleOfficerContactPerson.getPhoneNumber().getNumberPart2())) {

            bindingResult.rejectValue("phoneNumber.numberPart2", "phoneNumber.numberPart2.Invalid.validationtext");
        }
        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getPhoneNumber().getExtension())
                && !fieldsValidator.validateNumber(responsibleOfficerContactPerson.getPhoneNumber().getExtension())) {

            bindingResult.rejectValue("phoneNumber.extension", "phoneNumber.extension.Invalid.validationtext");
        }

        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getFaxNumber().getNumberPart1())
                || (responsibleOfficerContactPerson.getFaxNumber().getNumberPart1() == null)) {

            bindingResult.rejectValue("faxNumber.numberPart1", "faxNUmber.numberPart1.Required.validationtext");
        }

        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getFaxNumber().getNumberPart2())
                || responsibleOfficerContactPerson.getFaxNumber().getNumberPart2() == null) {

            bindingResult.rejectValue("faxNumber.numberPart2", "faxNUmber.numberPart2.Required.validationtext");
        }
        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getFaxNumber().getNumberPart1())
                && !fieldsValidator.validateNumber(responsibleOfficerContactPerson.getFaxNumber().getNumberPart1())) {
            bindingResult.rejectValue("faxNumber.numberPart1", "faxNUmber.numberPart1.Invalid.validationtext");
        }
        if (!StringUtils.isEmpty(responsibleOfficerContactPerson.getFaxNumber().getNumberPart2()) && !fieldsValidator
                .validateTelephoneNumber(responsibleOfficerContactPerson.getFaxNumber().getNumberPart2())) {

            bindingResult.rejectValue("faxNumber.numberPart2", "faxNUmber.numberPart2.Invalid.validationtext");
        }
        if (StringUtils.isEmpty(responsibleOfficerContactPerson.getEmail())
                || responsibleOfficerContactPerson.getEmail() == null) {

            bindingResult.rejectValue("email", "responsibleOfficerContactPerson.email.Required.validationtext");
        } else {
            if (!fieldsValidator.validateEmailChar(responsibleOfficerContactPerson.getEmail())) {
                bindingResult.rejectValue("email", "responsibleOfficerContactPerson.email.Invalid.validationtext");
            } else {
                if (!fieldsValidator.validateEmailFormat(responsibleOfficerContactPerson.getEmail())) {
                    bindingResult.rejectValue("email",
                            "responsibleOfficerContactPerson.email.Invalid.format.validationtext");
                }
            }
        }

        PowerOfAttorney poa1 = null;
        PowerOfAttorney poa2 = null;
        if (contactInfo != null) {
            poa1 = contactInfo.getPowerOfAttorney1();
            poa2 = contactInfo.getPowerOfAttorney2();
        }

        boolean poa1Match = (poa1 != null && responsibleOfficerContactPerson != null && poa1.getEmail() != null
                && poa1.getLegalName().getFirstName() != null && poa1.getLegalName().getLastName() != null
                && responsibleOfficerContactPerson.getEmail() != null
                && responsibleOfficerContactPerson.getLegalName().getFirstName() != null
                && responsibleOfficerContactPerson.getLegalName().getLastName() != null
                && poa1.getEmail().equalsIgnoreCase(responsibleOfficerContactPerson.getEmail())
                && poa1.getLegalName().getFirstName()
                        .equalsIgnoreCase(responsibleOfficerContactPerson.getLegalName().getFirstName())
                && poa1.getLegalName().getLastName()
                        .equalsIgnoreCase(responsibleOfficerContactPerson.getLegalName().getLastName()));

        boolean poa2Match = (poa2 != null && responsibleOfficerContactPerson != null && poa2.getEmail() != null
                && poa2.getLegalName().getFirstName() != null && poa2.getLegalName().getLastName() != null
                && responsibleOfficerContactPerson.getEmail() != null
                && responsibleOfficerContactPerson.getLegalName().getFirstName() != null
                && responsibleOfficerContactPerson.getLegalName().getLastName() != null
                && poa2.getEmail().equalsIgnoreCase(responsibleOfficerContactPerson.getEmail())
                && poa2.getLegalName().getFirstName()
                        .equalsIgnoreCase(responsibleOfficerContactPerson.getLegalName().getFirstName())
                && poa2.getLegalName().getLastName()
                        .equalsIgnoreCase(responsibleOfficerContactPerson.getLegalName().getLastName()));

        if (poa1Match || poa2Match) {
            bindingResult.rejectValue("legalName.lastName",
                    "responsibleOfficerContactPerson.UnallowedMatch.validationtext");
        }

    }

    /**
     * @return the fieldsValidator
     */
    public FieldsValidator getFieldsValidator() {
        return fieldsValidator;
    }

    /**
     * @param fieldsValidator
     *            the fieldsValidator to set
     */
    public void setFieldsValidator(FieldsValidator fieldsValidator) {
        this.fieldsValidator = fieldsValidator;
    }

    /**
     * @return the contact info
     */
    public ContactInfo getContactInfo() {
        return contactInfo;
    }

    /**
     * @param contactInfo
     *            the contact info to set
     */
    public void setContactInfo(ContactInfo contactInfo) {
        this.contactInfo = contactInfo;
    }
}
