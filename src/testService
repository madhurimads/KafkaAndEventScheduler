package gov.irs.fatca.qi.core.util;

import java.text.MessageFormat;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * @author thomas.t.nelson
 *
 */
abstract public class StringUtils {

    protected static final String DEFAULT_WILDCARD = "%";

    /**
     * Return String with Wildcards using the DEFAULT_WILDCARD
     * 
     * @param original
     * @param length
     * @return
     */
    public static String getStringWithWildcards(String original, int length) {
        return getStringWithWildcards(original, length, DEFAULT_WILDCARD);
    }

    /**
     * Return String with Wildcards using the DEFAULT_WILDCARD
     * 
     * 
     * 
     * @param original
     * @param length
     * @param wildcard
     * @return
     */
    public static String getStringWithWildcards(String original, int length, String wildcard) {
        String originalWithWildcards = "";

        if (!org.springframework.util.StringUtils.isEmpty(original) && original.length() == length) {
            originalWithWildcards = original;
        } else if (!org.springframework.util.StringUtils.isEmpty(original) && original.length() < length) {
            originalWithWildcards = StringUtils.concatenateWithNulls("", wildcard, original, wildcard);
        } else {
            originalWithWildcards = wildcard;
        }
        return originalWithWildcards;

    }

    /**
     * 
     * @param expression
     * @param context
     * @return
     */
    public static String parseStringWithParams(String pattern, Object... params) {
        MessageFormat mf = new MessageFormat(pattern);
        return mf.format(params);
    }

    /**
     * 
     * @param delimiter
     * @param one
     * @param two
     * @return String without nulls
     */
    public static String concatenateWithNulls(String delimiter, String one, String two) {
        return Stream.of(one, two).filter(x -> x != null).map(x -> x.trim()).collect(Collectors.joining(delimiter));
    }

    /**
     * 
     * @param delimiter
     * @param one
     * @param two
     * @Param three
     * @return String without nulls
     */
    public static String concatenateWithNulls(String delimiter, String one, String two, String three) {
        return Stream.of(one, two, three).filter(x -> x != null).map(x -> x.trim())
                .collect(Collectors.joining(delimiter));
    }

    /**
     * 
     * @param delimiter
     * @param one
     * @param two
     * @Param three
     * @Param four
     * @return String without nulls
     */
    public static String concatenateWithNulls(String delimiter, String one, String two, String three, String four) {
        return Stream.of(one, two, three, four).filter(x -> x != null).map(x -> x.trim())
                .collect(Collectors.joining(delimiter));
    }

    /**
     * 
     * @param delimiter
     * @param one
     * @param two
     * @param three
     * @param four
     * @param five
     * @return
     */
    public static String concatenateWithNulls(String delimiter, String one, String two, String three, String four,
            String five) {
        return Stream.of(one, two, three, four, five).filter(x -> x != null).map(x -> x.trim())
                .collect(Collectors.joining(delimiter));
    }

    /**
     * 
     * @param delimiter
     * @param input
     * @param index
     * @return
     */
    public static String insertAtIndexWithNulls(String delimiter, String input, int index) {

        return Optional.ofNullable(input).map(s -> new StringBuilder(s).insert(index, delimiter).toString()).orElse("");

    }

    /**
     * 
     * @param input
     *            original string to clean up
     * @return String with any instances of "null" removed
     */
    public static String removeNulls(String input) {
        String sansNulls = input;
        sansNulls = sansNulls.replace(", null", "");
        sansNulls = sansNulls.replace("null, ", "");
        sansNulls = sansNulls.replace("null", "");
        return sansNulls;
    }

    /**
     * 
     * @param delimiter
     * @param input
     * @return
     */
    public static List<String> splitStringOnDelimiter(String delimiter, String input) {
        List<String> stringElements = Stream.of(input).map(w -> w.split(delimiter)).flatMap(Arrays::stream)
                .collect(Collectors.toList());
        return stringElements;

    }

    public static List<String> splitStringOnDot(String input) {
        List<String> stringElements = splitStringOnDelimiter(Pattern.quote("."), input);
        return stringElements;

    }

}
