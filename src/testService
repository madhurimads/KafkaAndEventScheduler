package gov.irs.fatca.qi.core.util;

import gov.irs.fatca.qi.domain.cert.disp.*;
import gov.irs.fatca.qi.domain.cert.resp.QuestionResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ui.ConcurrentModel;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class ResponseEvaluationUtilsTest {

    private ResponseEvaluationUtils utils;
    private QuestionnairePage page;
    private ExternalElementsProvider extPage;

    @BeforeEach
    void setUp() {
        utils = new ResponseEvaluationUtils();
        page = new QuestionnairePage();
        extPage = new CompositeQuestionnairePage(); // implements ExternalElementsProvider
    }

    private Element buildElement(String name, String responseValue) {
        QuestionResponse qr = new QuestionResponse();
        qr.setResponseValue(responseValue);
        return Element.builder()
                .officialName(name)
                .questionResponse(qr)
                .build();
    }

    @Test
    void allElementsAnswered_checkBoxes_allAnswered() {
        page.addElement(buildElement("A", "1"));
        page.addElement(buildElement("B", "1"));

        boolean result = utils.allElementsAnswered(List.of("A", "B"), page, ElementTypes.CBX_CODE);
        assertTrue(result);
    }

    @Test
    void allElementsAnswered_checkBoxes_oneUnchecked_returnsFalse() {
        page.addElement(buildElement("A", "1"));
        page.addElement(buildElement("B", "0"));

        assertFalse(utils.allElementsAnswered(List.of("A", "B"), page, ElementTypes.CBX_CODE));
    }

    @Test
    void oneOrMoreElementsAnswered_checkBoxes_trueIfOneChecked() {
        page.addElement(buildElement("A", "0"));
        page.addElement(buildElement("B", "1"));
        assertTrue(utils.oneOrMoreElementsAnswered(List.of("A", "B"), page, ElementTypes.CBX_CODE));
    }

    @Test
    void oneOrMoreElementsAnswered_numericOrQty_withResponse() {
        page.addElement(buildElement("X", "123"));
        assertTrue(utils.oneOrMoreElementsAnswered(List.of("X"), page, ElementTypes.AMT_CODE));
    }

    @Test
    void radioButtonSelectionMatches_yesMatch() {
        Element el = buildElement("RAD1", "YES");
        extPage = new CompositeQuestionnairePage();
        ((CompositeQuestionnairePage)extPage).addElement(el);
        assertTrue(utils.radioButtonSelectionMatches("RAD1", extPage, "YES"));
        assertFalse(utils.radioButtonSelectionMatches("RAD1", extPage, "NO"));
    }

    @Test
    void dropdownMenuSelectedOptionMatches_caseInsensitiveMatch() {
        page.addElement(buildElement("SEL", "Option1"));
        assertTrue(utils.dropdownMenuSelectedOptionMatches("SEL", page, List.of("option1", "other")));
        assertFalse(utils.dropdownMenuSelectedOptionMatches("SEL", page, List.of("X", "Y")));
    }

    @Test
    void firstElementsAnswered_and_lastElementsAnswered_presentAndMissing() {
        page.addElement(buildElement("F", "abc"));
        assertTrue(utils.firstElementsAnswered("F", page));

        extPage = new CompositeQuestionnairePage();
        ((CompositeQuestionnairePage)extPage).addElement(buildElement("L", "val"));
        assertTrue(utils.lastElementsAnswered("L", extPage));
        assertFalse(utils.lastElementsAnswered("Q", extPage));
    }

    @Test
    void isResponseValueEqualToNumber_intAndLong() {
        Element eNum = buildElement("num", "42");
        assertTrue(utils.isResponseValueEqualToNumber(eNum, 42));
        assertTrue(utils.isResponseValueEqualToNumber(eNum, 42L));

        Element bad = buildElement("bad", "notnum");
        assertFalse(utils.isResponseValueEqualToNumber(bad, 100));
    }

    @Test
    void isResponseValueEqualToYesNo_strMatch() {
        Element e = buildElement("YN", "YES");
        assertTrue(utils.isResponseValueEqualToYesNo(e, "YES"));
        assertFalse(utils.isResponseValueEqualToYesNo(e, "NO"));
        Element nullE = buildElement("NIL", null);
        assertFalse(utils.isResponseValueEqualToYesNo(nullE, "YES"));
    }

    @Test
    void isCalendarResponse2017_validAndInvalid() {
        Element e = buildElement("C", "1,234");
        assertTrue(utils.isCalendarResponse2017(e, 1234));
        Element bad = buildElement("D", "abc");
        assertFalse(utils.isCalendarResponse2017(bad, 100));
    }

    @Test
    void checkAggregateAmount_lessThanOrEqual_trueAndFalse() {
        CompositeQuestionnairePage ce = new CompositeQuestionnairePage();
        ce.addElement(buildElement("amt", "500"));
        assertTrue(utils.checkAggregateAmount("amt", ce, 1000));
        assertFalse(utils.checkAggregateAmount("amt", ce, 400));
        ce = new CompositeQuestionnairePage();
        ce.addElement(buildElement("amt", "notnum"));
        assertFalse(utils.checkAggregateAmount("amt", ce, 1000));
    }

    @Test
    void rowArrangeElements_removesFilteredAndGroups() {
        QuestionnairePage qp = new QuestionnairePage();
        Element eA = buildElement("QI_NUM_ACCNTS_POP", "1");
        Element eX = buildElement("OTHER", "1");
        qp.addElement(eA);
        qp.addElement(eX);

        ConcurrentModel model = new ConcurrentModel();
        utils.rowArrangeElements(model, qp, List.of("OTHER"));

        @SuppressWarnings("unchecked")
        var groups = (List<List<Element>>)model.getAttribute("pageElements");
        assertNotNull(groups);
        assertEquals(3, groups.size());
        assertFalse(qp.getElements().stream().anyMatch(e->"OTHER".equals(e.getOfficialName())));
    }

    @Test
    void appendixTableOneElements_buildsCorrectGroups() {
        QuestionnairePage qp = new QuestionnairePage();
        ConcurrentModel model = new ConcurrentModel();
        utils.appendixTableOneElements(model, qp, List.of());

        assertNotNull(model.getAttribute("tableOneElements"));
        @SuppressWarnings("unchecked")
        var table = (List<List<Element>>)model.getAttribute("tableOneElements");
        assertEquals(8, table.size());
    }

    @Test
    void appendixTableTwoElements_buildsCorrectGroups() {
        QuestionnairePage qp = new QuestionnairePage();
        ConcurrentModel model = new ConcurrentModel();
        utils.appendixTableTwoElements(model, qp, List.of());

        assertNotNull(model.getAttribute("tableTwoElements"));
        @SuppressWarnings("unchecked")
        var table = (List<List<Element>>)model.getAttribute("tableTwoElements");
        assertEquals(7, table.size());
    }

    @Test
    void onRowTables_filtersByElementName() {
        QuestionnairePage qp = new QuestionnairePage();
        qp.addElement(buildElement("MYELEM", "val"));
        qp.addElement(buildElement("MYELEM_Y1", "val1"));
        qp.addElement(buildElement("OTHER", "x"));
        ConcurrentModel model = new ConcurrentModel();
        utils.onRowTables(model, qp, "MYELEM", "label");

        @SuppressWarnings("unchecked")
        var lst = (List<List<Element>>)model.getAttribute("label_model");
        assertEquals(1, lst.size());
        assertEquals(2, lst.get(0).size());
    }
}
