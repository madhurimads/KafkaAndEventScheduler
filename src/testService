import gov.irs.fatca.qi.controller.AdminEntityInfoServiceController;
import gov.irs.fatca.qi.domain.Error;
import gov.irs.fatca.qi.domain.admin.EntitySubmissionInfo;
import gov.irs.fatca.qi.domain.admin.SubmissionInfo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.http.HttpEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class AdminEntityInfoServiceControllerTest {

    @InjectMocks
    AdminEntityInfoServiceController controller;

    @Mock
    RestTemplate mockRestTemplate;

    @Captor
    ArgumentCaptor<HttpEntity<String>> stringHttpEntityCaptor;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        controller.restTemplate = mockRestTemplate;

        controller.dalHost = "http://dal-service";
        controller.getAdminEntityInfoServiceEnabled = true;
        controller.updateSubmissionInfoServiceEnabled = true;
        controller.updateEntitySubmissionInfoServiceEnabled = true;

        controller.getAdminEntityInfoService = "/getAdmin";
        controller.updateSubmissionInfoService = "/updateSubmission";
        controller.updateEntitySubmissionInfoService = "/updateEntity";
    }

    @Test
    void retriveSubmission_validRequest_shouldCallRestTemplate() {
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
        headers.add("messageid", "test-message");

        when(mockRestTemplate.postForObject(anyString(), any(), eq(Object.class), any(), any()))
                .thenReturn("mocked-response");

        Object result = controller.retriveSubmission("SADI123", "info", headers);

        assertEquals("mocked-response", result);
        verify(mockRestTemplate, times(1))
                .postForObject(contains(controller.getAdminEntityInfoService), any(), eq(Object.class), any(), any());
    }

    @Test
    void retriveSubmission_serviceDisabled_returnsStaticInfo() {
        controller.getAdminEntityInfoServiceEnabled = false;

        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
        Object result = controller.retriveSubmission("SADI123", "info", headers);

        assertTrue(result instanceof SubmissionInfo);
        SubmissionInfo info = (SubmissionInfo) result;
        assertEquals("peter", info.getLastUpdatedBy());
    }

    @Test
    void retriveSubmission_invalidInputs_returnsError() {
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
        headers.add("messageid", "invalid-test");

        Object result = controller.retriveSubmission(null, "badRequestType", headers);
        assertTrue(result instanceof Error);
        assertEquals("BSL-9064", ((Error) result).getCode());
    }

    @Test
    void updateSubmission_success_shouldPostToRestTemplate() {
        SubmissionInfo submissionInfo = new SubmissionInfo();
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
        headers.add("messageid", "update-test");

        when(mockRestTemplate.postForObject(anyString(), any(), eq(Object.class), any(), any(), any()))
                .thenReturn("updated");

        Object result = controller.updateSubmission("SEID1", "ENTID1", "type", submissionInfo, headers);

        assertEquals("updated", result);
        verify(mockRestTemplate).postForObject(
                contains(controller.updateSubmissionInfoService), any(), eq(Object.class),
                eq("SEID1"), eq("ENTID1"), eq("type")
        );
    }

    @Test
    void updateSubmission_disabled_returnsStaticValue() {
        controller.updateSubmissionInfoServiceEnabled = false;

        Object result = controller.updateSubmission("SEID1", "ENTID1", "type", new SubmissionInfo(),
                new LinkedMultiValueMap<>());

        assertEquals("111111", result);
    }

    @Test
    void updateSubmission_exceptionThrown_returnsError() {
        SubmissionInfo submissionInfo = new SubmissionInfo();
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
        headers.add("messageid", "msg-id");

        when(mockRestTemplate.postForObject(anyString(), any(), eq(Object.class), any(), any(), any()))
                .thenThrow(new RuntimeException("Test Exception"));

        Object result = controller.updateSubmission("SEID", "ENTID", "UT", submissionInfo, headers);

        assertTrue(result instanceof Error);
        assertEquals("3029", ((Error) result).getCode());
    }

    @Test
    void updateEntitySubmissionInfo_success_shouldReturnHttpStatusOK() {
        EntitySubmissionInfo entitySubmissionInfo = new EntitySubmissionInfo();
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();

        Object result = controller.updateEntitySubmissionInfo("SEID1", "ENTID1", entitySubmissionInfo, headers);

        assertEquals(org.springframework.http.HttpStatus.OK, result);
    }

    @Test
    void updateEntitySubmissionInfo_exceptionThrown_returnsError() {
        EntitySubmissionInfo entitySubmissionInfo = new EntitySubmissionInfo();
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
        headers.add("messageid", "err-id");

        doThrow(new RuntimeException("fail"))
                .when(mockRestTemplate)
                .postForObject(anyString(), any(), eq(Object.class), any(), any());

        Object result = controller.updateEntitySubmissionInfo("SEID", "ENTID", entitySubmissionInfo, headers);

        assertTrue(result instanceof Error);
        assertEquals("3030", ((Error) result).getCode());
    }
}
