import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import gov.irs.fatca.qi.domain.cert.disp.*;
import gov.irs.fatca.qi.domain.entity.CcgMemberDetail;
import gov.irs.fatca.qi.domain.entity.ReviewMode;
import gov.irs.fatca.qi.service.CertificationService;
import gov.irs.fatca.qi.ui.security.AuthenticatedUserRoleUtils;

import java.util.Collections;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class CCGMemberQiCertificationPartFourControllerTest {

    @InjectMocks
    CCGMemberQiCertificationPartFourController controller;

    @Mock
    CertificationService certificationService;

    @Mock
    Model model;

    @Mock
    CompositeQuestionnairePage compPage;

    @Mock
    QuestionnairePage page17;

    @BeforeEach
    void init() {
        MockitoAnnotations.openMocks(this);
        controller.yearForPartFive = 2025;
        // call @PostConstruct manually
        controller.init();
    }

    @Test
    void testGetPage16_validUserNotLockedOut_returnsCompositeTemplate() {
        ReviewMode reviewMode = new ReviewMode();
        CcgMemberDetail ccg = new CcgMemberDetail();
        ccg.setCertificationId(100L);

        when(AuthenticatedUserRoleUtils.isSelectedUserLockedOutOfCertQuestionaire()).thenReturn(false);
        when(AuthenticatedUserRoleUtils.isSelectedUserCCGLead()).thenReturn(true);
        when(certificationService.getCompositeQuestionnairePage(eq(100L), any())).thenReturn(compPage);
        when(compPage.getPage(16)).thenReturn(new CompositeQuestionnairePage.Page(Collections.emptyList()));
        when(compPage.getElements()).thenReturn(Collections.emptyList());

        String view = controller.getPage16(model, reviewMode, ccg);

        assertEquals(CCGMemberQiCertificationPartFourController.COMP_TEMPLATE, view);
        verify(model).addAttribute("ccgMemberDetail", ccg);
        verify(model).addAttribute("reviewMode", reviewMode);
        verify(model).addAttribute("isLead", true);
    }

    @Test
    void testPage16toCCGMembersList_userLead_redirectsToMemberList() {
        when(AuthenticatedUserRoleUtils.isSelectedUserCCGLead()).thenReturn(true);

        String result = controller.page16toCCGMembersList();

        assertTrue(result.contains(CCGMemberQiCertificationPartFourController.CERT_QI_PART7_COMPLIANCE_GROUP_MEMBER_LIST));
    }

    @Test
    void testPage16toCCGMembersList_userNotLead_redirectsToInstruction() {
        when(AuthenticatedUserRoleUtils.isSelectedUserCCGLead()).thenReturn(false);

        String result = controller.page16toCCGMembersList();

        assertTrue(result.contains("/secure/qi-cert-instruction"));
    }

}
