import gov.irs.fatca.qi.core.util.DropdownGeneratorUtils;
import gov.irs.fatca.qi.domain.admin.EntitySubmissionInfo;
import gov.irs.fatca.qi.domain.enums.AdminStatusEnum;
import gov.irs.fatca.qi.domain.enums.ApplicationCannedMessageEnum;
import gov.irs.fatca.qi.domain.enums.RenewalCannedMessageEnum;
import gov.irs.fatca.qi.domain.entity.ProfileInfo;
import org.junit.jupiter.api.Test;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class DropdownGeneratorUtilsTest {

    @Test
    void statusDropdown_removesOverdueIfNotRN_andMissingFieldsRemovesSubmitted() {
        EntitySubmissionInfo info = new EntitySubmissionInfo();
        info.setSubmissionTypeCode("AP"); // not RN
        info.setCountryOfOrg("");
        info.setEntityType("");
        info.setEntityLegalName("");
        // KYC irrelevant unless entityType QI

        Map<String, String> dropdown = DropdownGeneratorUtils.statusDropdown(info);

        assertFalse(dropdown.containsKey(AdminStatusEnum.OVERDUE_STATUS.getCode()));
        assertFalse(dropdown.containsKey(AdminStatusEnum.SUBMITTED_STATUS.getCode()));
        // Some other status should remain
        assertTrue(dropdown.containsKey(AdminStatusEnum.DRAFT_STATUS.getCode()));
    }

    @Test
    void statusDropdown_keepsOverdueForRN_andHasAllFields() {
        EntitySubmissionInfo info = new EntitySubmissionInfo();
        info.setSubmissionTypeCode("RN");
        info.setCountryOfOrg("US");
        info.setEntityType("ABC");
        info.setEntityLegalName("Name");
        info.setKycJurisdiction("Jurisdiction"); // only needed if type is QI

        Map<String, String> dropdown = DropdownGeneratorUtils.statusDropdown(info);

        assertTrue(dropdown.containsKey(AdminStatusEnum.OVERDUE_STATUS.getCode()));
        assertTrue(dropdown.containsKey(AdminStatusEnum.SUBMITTED_STATUS.getCode()));
    }

    @Test
    void applicationCannedMessageDropdown_excludesC051() {
        Map<String, String> map = DropdownGeneratorUtils.applicationCannedMessageDropdown();
        assertFalse(map.containsKey(ApplicationCannedMessageEnum.C_051.getCode()));
        // Other enums should exist
        assertTrue(map.size() > 0);
    }

    @Test
    void renewalCannedMessageDropdown_excludesC052() {
        Map<String, String> map = DropdownGeneratorUtils.renewalCannedMessageDropdown();
        assertFalse(map.containsKey(RenewalCannedMessageEnum.C_052.getCode()));
        assertTrue(map.size() > 0);
    }

    @Test
    void contentTypeDropdown_profileInfoConditionsApplied() {
        ProfileInfo prof = new ProfileInfo();
        prof.setQdd(false);
        prof.setEntityStatus("AP"); // triggers removal of FORM_SS_4
        var map = DropdownGeneratorUtils.contentTypeDropdown(prof);

        // PAPER_ADDITIONAL_BRANCH_INFORMATION and PAPER_FORM14345 always removed
        assertFalse(map.containsKey("PAPER_ADDITIONAL_BRANCH_INFORMATION"));
        assertFalse(map.containsKey("PAPER_FORM14345"));
        // QDD_TRANSACTIONS removed since not QDD
        assertFalse(map.containsKey("QDD_TRANSACTIONS"));
    }

    @Test
    void reviewAndDueYearsDropdown_rangeCorrect() {
        int start = 2020;
        Map<String, String> review = DropdownGeneratorUtils.ReviewYearsDropdown(start);
        Map<String, String> due = DropdownGeneratorUtils.dueYearsDropdown(start);

        int current = java.time.Year.now().getValue();
        assertEquals(current - start, review.size());
        assertEquals(current - start + 1, due.size());
        assertTrue(review.containsKey(String.valueOf(current - 1)));
        assertTrue(due.containsKey(String.valueOf(current)));
    }
}
