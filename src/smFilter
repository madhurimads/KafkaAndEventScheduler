package gov.irs.fatca.qi.ui.security;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

import org.owasp.esapi.ESAPI;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.preauth.RequestHeaderAuthenticationFilter;

/**
 * 
 * @author thomas.t.nelson
 *
 */
public class SiteMinderRequestHeaderAuthenticationFilter extends RequestHeaderAuthenticationFilter {

	/* 
	 * the request header we are looking for to grab the user's uuid from SADI login
	 * this value is set by the property "security.principal.request.header.sadi" via <code>SecurityConfig</code>
	 */
	private String principalRequestHeader = "SM_USER";

    protected Logger logger = LoggerFactory.getLogger(this.getClass());
    

    /*
     * (non-Javadoc)
     * 
     * @see org.springframework.security.web.authentication.preauth.
     * RequestHeaderAuthenticationFilter#getPreAuthenticatedPrincipal(javax.
     * servlet.http.HttpServletRequest)
     */
    protected Object getPreAuthenticatedPrincipal(HttpServletRequest request) {
        String principal = request.getHeader(principalRequestHeader);
        if (principal != null) {
	        String newPrincipalprincipal = principal.split(",")[0]; // remove everything after comma leaving irsUUID=########-####-####-####-############
			int x = newPrincipalprincipal.indexOf("="); // remove this 'irsuuid='
			String onlyUUID = principal.substring((x+1));
	        if (logger.isDebugEnabled()) {
	            logger.debug("\n\tgetPreAuthenticatedPrincipal header key:  " + principalRequestHeader 
	            		+ "\n\tgetPreAuthenticatedPrincipal STRING value" + encodeLogMessage(onlyUUID));
	        }
	
	        return onlyUUID;
        } else {
        	if (logger.isDebugEnabled()) {
                logger.debug("getPreAuthenticatedPrincipal STRING  " + encodeLogMessage(principal));
        	}
        	return principal;
        }
    }

    /**
     * 
     */
    protected boolean principalChanged(HttpServletRequest request, Authentication currentAuthentication) {

        Object principal = getPreAuthenticatedPrincipal(request);

        UserDetails currentDetails = UserDetails.class.cast(currentAuthentication.getPrincipal());
        String currentAuthenticationUserId = "";
        String newAuthenticationUserId = "";

        if (currentDetails != null) {
            currentAuthenticationUserId = currentDetails.getUsername();
        }

        if (principal != null) {
            newAuthenticationUserId = principal.toString();
        }

        if (logger.isDebugEnabled()) {

            logger.debug("request path" + encodeLogMessage(request.getPathInfo()));

            logger.debug("SECURITY currentAuthenticationUserId " + encodeLogMessage(currentAuthenticationUserId)
                    + "  newAuthenticationUserId " + encodeLogMessage(newAuthenticationUserId));

            logger.debug("principal " + encodeLogMessage(principal.toString()) + " currentAuthentication " + encodeLogMessage(currentAuthentication.toString()));
            logger.debug("principal " + encodeLogMessage(principal.toString()) + " currentAuthentication  principal object"
                    + encodeLogMessage(currentAuthentication.getPrincipal().toString()));
        }
        /**
         * Check to Object is null or equals to previous Other wise update the
         * security context and user session.
         */
        if (principal != null && !newAuthenticationUserId.equals(currentAuthenticationUserId)) {
            // Clear Security Context
            SecurityContextHolder.clearContext();

            HttpSession session = request.getSession(false);

            if (session != null) {
                logger.debug("Invalidating existing session");
                session.invalidate();
                request.getSession();
            }

            // Add the principle to the security context
            Authentication authResult = Authentication.class.cast(principal);

            SecurityContextHolder.getContext().setAuthentication(authResult);

        }

        /**
         * Always return false other wise the request will not be authenticated
         */
        return false;

    }
    
    private String encodeLogMessage(String message) {
        if(message == null){
            return "";
        }
		if(message.contains("\n") || message.contains("\r")){
			logger.debug("removing potentially dangerous characters from user input");
			message = message.replace( '\n' ,  '_' ).replace( '\r' , '_' );
		}
	    message = ESAPI.encoder().encodeForHTML( message );
	    return message;
	}

    /**
     * @return the principalRequestHeader
     */
    public String getPrincipalRequestHeader() {
        return principalRequestHeader;
    }

    /**
     * @param principalRequestHeader
     *            the principalRequestHeader to set
     */
    public void setPrincipalRequestHeader(String principalRequestHeader) {
        super.setPrincipalRequestHeader(principalRequestHeader);
        this.principalRequestHeader = principalRequestHeader;
    }

}
