package gov.irs.fatca.qi.main;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import gov.irs.fatca.qi.service.user.SiteMinderUserDetailsService;
import gov.irs.fatca.qi.ui.security.SiteMinderRequestHeaderAuthenticationFilter;

/**
 * Spring Securities configurations for using SiteMinder pre-authentication.
 * 
 * @author li.c.liu
 *
 */
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    private UserDetailsService userDetailsService;

    private PreAuthenticatedAuthenticationProvider preAuthenticatedProvider;

    @Value("${security.login.page}")
    private String loginPage;

    @Value("${security.login.processing.url}")
    private String loginProcessUrl;

    @Value("${security.use.default.success.url}")
    private boolean useDefaultSuccessUrl;

    @Value("${security.default.success.url}")
    private String defaultSuccessUrl;

    @Value("${security.authentication.failure.url}")
    private String authenticationFailureUrl;
    
    @Value("${security.principal.request.header.sadi}")
    private String principalRequestHeader;

    @Value("${security.logout.url}")
    private String logoutUrl;

    @Value("${pii.logout.url}")
    private String piiLogoutUrl;

    @Value("${security.invalidate.http.session}")
    private boolean invalidateHttpSession;

    @Value("${security.cookie.name}")
    private String cookieNameToClear;

    @Value("${server.session.timeout}")
    private String serverSessionTimeout;

    public SecurityConfig() {
        super();

        userDetailsService = new SiteMinderUserDetailsService();
        UserDetailsByNameServiceWrapper<PreAuthenticatedAuthenticationToken> wrapper = new UserDetailsByNameServiceWrapper<PreAuthenticatedAuthenticationToken>(
                userDetailsService);

        preAuthenticatedProvider = new PreAuthenticatedAuthenticationProvider();
        preAuthenticatedProvider.setPreAuthenticatedUserDetailsService(wrapper);
    }

    public class NoRedirectSavedRequestAwareAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {

        @Override
        public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
                Authentication authentication) throws ServletException, IOException {

            request.getSession().setMaxInactiveInterval(Integer.parseInt(serverSessionTimeout));
        }
    }

    @Override
    protected void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {

        authenticationManagerBuilder.authenticationProvider(preAuthenticatedProvider);
    }

    @Override
    public void configure(WebSecurity webSecurity) throws Exception {
        webSecurity.ignoring().antMatchers("/resources/**");
    }

    @Override
    protected void configure(HttpSecurity httpSecurity) throws Exception {

        SiteMinderRequestHeaderAuthenticationFilter siteMinderFilter = new SiteMinderRequestHeaderAuthenticationFilter();
        siteMinderFilter.setPrincipalRequestHeader(principalRequestHeader);
        siteMinderFilter.setAuthenticationManager(authenticationManager());

        httpSecurity.addFilter(siteMinderFilter).authorizeRequests()
                .antMatchers("/qi-newlogin", "/resources/**", "/content/**").permitAll().antMatchers("/**")
                .hasRole("USER").and().formLogin().loginPage(loginPage).loginProcessingUrl(loginProcessUrl)
                .defaultSuccessUrl(defaultSuccessUrl, useDefaultSuccessUrl).failureUrl(authenticationFailureUrl)
                .successHandler(new NoRedirectSavedRequestAwareAuthenticationSuccessHandler()).permitAll().and()
                .logout().logoutRequestMatcher(new AntPathRequestMatcher(logoutUrl)).permitAll()
                .logoutSuccessUrl(piiLogoutUrl).invalidateHttpSession(invalidateHttpSession)
                .deleteCookies(cookieNameToClear).and().sessionManagement().sessionFixation().newSession();

    }
}
