import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import gov.irs.fatca.qi.service.user.SiteMinderUserDetailsService;
import gov.irs.fatca.qi.ui.security.SiteMinderRequestHeaderAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Value("${security.login.page}")
    private String loginPage;

    @Value("${security.login.processing.url}")
    private String loginProcessUrl;

    @Value("${security.use.default.success.url}")
    private boolean useDefaultSuccessUrl;

    @Value("${security.default.success.url}")
    private String defaultSuccessUrl;

    @Value("${security.authentication.failure.url}")
    private String authenticationFailureUrl;

    @Value("${security.principal.request.header.sadi}")
    private String principalRequestHeader;

    @Value("${security.logout.url}")
    private String logoutUrl;

    @Value("${pii.logout.url}")
    private String piiLogoutUrl;

    @Value("${security.invalidate.http.session}")
    private boolean invalidateHttpSession;

    @Value("${security.cookie.name}")
    private String cookieNameToClear;

    @Value("${server.session.timeout}")
    private String serverSessionTimeout;

    private final UserDetailsService userDetailsService = new SiteMinderUserDetailsService();

    @Bean
    public PreAuthenticatedAuthenticationProvider preAuthenticatedProvider() {
        PreAuthenticatedAuthenticationProvider provider = new PreAuthenticatedAuthenticationProvider();
        provider.setPreAuthenticatedUserDetailsService(
                new UserDetailsByNameServiceWrapper<>(userDetailsService));
        return provider;
    }

    @Bean
    public AuthenticationManager authenticationManager() {
        return new ProviderManager(preAuthenticatedProvider());
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

        SiteMinderRequestHeaderAuthenticationFilter siteMinderFilter =
                new SiteMinderRequestHeaderAuthenticationFilter();
        siteMinderFilter.setPrincipalRequestHeader(principalRequestHeader);
        siteMinderFilter.setAuthenticationManager(authenticationManager());

        http
            .addFilter(siteMinderFilter)
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/qi-newlogin", "/resources/**", "/content/**").permitAll()
                .anyRequest().hasRole("USER")
            )
            .formLogin(login -> login
                .loginPage(loginPage)
                .loginProcessingUrl(loginProcessUrl)
                .defaultSuccessUrl(defaultSuccessUrl, useDefaultSuccessUrl)
                .failureUrl(authenticationFailureUrl)
                .successHandler(new NoRedirectSavedRequestAwareAuthenticationSuccessHandler())
                .permitAll()
            )
            .logout(logout -> logout
                .logoutRequestMatcher(new AntPathRequestMatcher(logoutUrl))
                .logoutSuccessUrl(piiLogoutUrl)
                .invalidateHttpSession(invalidateHttpSession)
                .deleteCookies(cookieNameToClear)
                .permitAll()
            )
            .sessionManagement(session -> session
                .sessionFixation().newSession()
            )
            .csrf().disable();

        return http.build();
    }

    public class NoRedirectSavedRequestAwareAuthenticationSuccessHandler
            extends SimpleUrlAuthenticationSuccessHandler {

        @Override
        public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
                                            Authentication authentication) throws IOException, ServletException {
            request.getSession().setMaxInactiveInterval(Integer.parseInt(serverSessionTimeout));
            super.onAuthenticationSuccess(request, response, authentication);
        }
    }
}
