package gov.irs.fatca.qi.main.tests;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import gov.irs.fatca.qi.application.model.Message;
import gov.irs.fatca.qi.application.model.MessageStatus;
import gov.irs.fatca.qi.application.model.MessageType;
import gov.irs.fatca.qi.application.model.QiEntity;
import gov.irs.fatca.qi.application.model.QiEntityMessage;
import gov.irs.fatca.qi.application.model.RenewalCycle;
import gov.irs.fatca.qi.application.model.RenewalCycleMessage;
import gov.irs.fatca.qi.application.model.pk.RenewalCycleMessagePK;
import gov.irs.fatca.qi.application.repository.MessageRepository;
import gov.irs.fatca.qi.application.repository.MessageStatusRepository;
import gov.irs.fatca.qi.application.repository.MessageTypeRepository;
import gov.irs.fatca.qi.application.repository.QiEntityMessageRepository;
import gov.irs.fatca.qi.application.repository.QiEntityRepository;
import gov.irs.fatca.qi.application.repository.RenewalCycleMessageRepository;
import gov.irs.fatca.qi.application.repository.RenewalCycleRepository;
import gov.irs.fatca.qi.main.FatcaQiDalMain;

@ExtendWith(MockitoExtension.class)
@SpringBootTest(classes = FatcaQiDalMain.class)
@ActiveProfiles("local")
public class RenewalCycleMessageRepositoryIntegrationTest {

    private RenewalCycleMessagePK renewalCycleMessagePk1;
    private RenewalCycleMessage sampleRenewalCycleMessage1;
    private QiEntityMessage sampleQiEntityMessage1;
    private RenewalCycle sampleRenewalCycle1;
    private QiEntityMessage sampleQiEntityMessage2;
    private QiEntity sampleQiEntity1;
    private QiEntity sampleQiEntity2;
    private Message sampleMessage;
    private MessageType messageType;
    private MessageStatus messageStatus;

    @Autowired
    MessageRepository messageRepository;

    @Autowired
    MessageStatusRepository messageStatusRepository;

    @Autowired
    MessageTypeRepository messageTypeRepository;

    @Autowired
    QiEntityRepository sampleQiEntityRepository;

    @Autowired
    RenewalCycleMessageRepository sampleRenewalCycleMessageRepository;

    @Autowired
    RenewalCycleRepository sampleRenewalCycleRepository;

    @Autowired
    QiEntityMessageRepository sampleQiEntityMessageRepository;

    @BeforeEach
    public void setUp() throws Exception {

        sampleQiEntity1 = new QiEntity();
        sampleQiEntity1.setQiEntityId("LL");
        sampleQiEntity1.setCreateTs(Timestamp.valueOf(LocalDateTime.now()));
        sampleQiEntity1.setCreatedById("VV");
        sampleQiEntity1.setUpdateTs(Timestamp.valueOf(LocalDateTime.now()));
        sampleQiEntity1.setUpdatedById("012345678901234567890123456789012345");
        sampleQiEntityRepository.save(sampleQiEntity1);

        sampleQiEntityMessage1 = new QiEntityMessage();
        sampleQiEntityMessage1.setQiEntityMessageId("YY");
        if (messageRepository.existsById("M-001")) {
            sampleMessage = messageRepository.findById("M-001").orElse(null);
            sampleQiEntityMessage1.setMessage(sampleMessage);
        }

        if (messageStatusRepository.existsById("NW")) {
            messageStatus = messageStatusRepository.findById("NW").orElse(null);
            sampleQiEntityMessage1.setMessageStatus(messageStatus);
        }
        sampleQiEntityMessage1.setQiEntity(sampleQiEntity1);
        sampleQiEntityMessage1.setMessageTxt(sampleMessage.getMessageDsc());
        sampleQiEntityMessage1.setUpdateTs(Timestamp.valueOf(LocalDateTime.now()));
        sampleQiEntityMessage1.setUpdatedById("012345678901234567890123456789012345");
        sampleQiEntityMessage1.setCreateTs(Timestamp.valueOf(LocalDateTime.now()));
        sampleQiEntityMessage1.setCreatedById("VV");

        sampleQiEntityMessageRepository.save(sampleQiEntityMessage1);

        sampleRenewalCycle1 = new RenewalCycle();
        sampleRenewalCycle1.setRenewalCycleId("9");
        sampleRenewalCycle1.setUpdateTs(Timestamp.valueOf(LocalDateTime.now()));
        sampleRenewalCycle1.setUpdatedById("012345678901234567890123456789012345");
        sampleRenewalCycleRepository.save(sampleRenewalCycle1);

        renewalCycleMessagePk1 = new RenewalCycleMessagePK();
        renewalCycleMessagePk1.setMessage(sampleQiEntityMessage1);
        renewalCycleMessagePk1.setRenewalCycle(sampleRenewalCycle1);

        sampleRenewalCycleMessage1 = new RenewalCycleMessage();
        sampleRenewalCycleMessage1.setRenewalCycleMessagePK(renewalCycleMessagePk1);
        sampleRenewalCycleMessage1.setUpdateTs(Timestamp.valueOf(LocalDateTime.now()));
        sampleRenewalCycleMessage1.setUpdatedById("012345678901234567890123456789012345");
        sampleRenewalCycleMessageRepository.save(sampleRenewalCycleMessage1);

    }

    @AfterEach
    public void tearDown() throws Exception {

        sampleRenewalCycleMessageRepository.delete(sampleRenewalCycleMessage1);

        sampleQiEntityMessageRepository.delete(sampleQiEntityMessage1);
        sampleQiEntityRepository.delete(sampleQiEntity1);
        sampleRenewalCycleRepository.delete(sampleRenewalCycle1);
    }

    @Disabled
    @Test
    public void testSave() {
    	fail("Not right, I shouldn't even run");
        List<RenewalCycleMessage> resultList = sampleRenewalCycleMessageRepository.findAll();

        assertEquals(1, resultList.size());
    }

    @Disabled
    @Test
    public void testFindByEntityId() {
        List<RenewalCycleMessage> resultList = sampleRenewalCycleMessageRepository
                .findByEntityId(sampleQiEntity1.getQiEntityId());
        assertEquals(1, resultList.size());
    }

}
